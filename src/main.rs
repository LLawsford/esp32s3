mod common;
use esp_idf_hal::prelude::Peripherals;
use esp_idf_sys as _; // If using the `binstart` feature of `esp-idf-sys`, always keep this module imported

use common::{
    rgb::{RGB8, WS2812RMT},
    wifi::wifi,
};
use esp_idf_svc::eventloop::EspSystemEventLoop;
use log::info;

#[derive(Debug)]
#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_sys::link_patches();
    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    info!("Hello, world! Burn!");
    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take().unwrap();
    // Onboard RGB LED pin
    // gpio48 for YD-ESP32-S3 (need to solder nearby pins to close circuit...)
    let led = peripherals.pins.gpio48;
    let channel = peripherals.rmt.channel0;
    let mut ws2812 = WS2812RMT::new(led, channel).unwrap();

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => {
            // Green!
            ws2812.set_pixel(RGB8::new(0, 1, 0)).unwrap();
            inner
        }
        Err(_err) => {
            // Red!
            ws2812.set_pixel(RGB8::new(1, 0, 0)).unwrap();
            return ();
        }
    };

    let mut brightness = 0;
    let mut up = true;
    loop {
        //pulse green
        std::thread::sleep(std::time::Duration::from_millis(60));
        ws2812.set_pixel(RGB8::new(0, brightness, 0));

        if brightness < 31 && up {
            brightness += 1;
        }

        if brightness == 30 && up {
            up = false;
        }

        if brightness > 0 && !up {
            brightness -= 1;
        }

        if brightness == 0 && !up {
            up = true;
        }
    }
}
